Section A : BASIC CONCEPTS  
 
Q1. create database company_db;

Q2. create table employees( employee_id serial primary key,
first_name varchar,
last_name varchar,
salary int ,
hire_date date ,
dept_id int);
create table depatments( dept_id serial primary key,
dept_name varchar); 
copy employees from 'E:/ employees table.csv'delimiter ',' csv header;
copy departments from 'E:/ departments table.csv' delimiter ',' csv header;

Q3 Drop     -  Delete the data from the table but not the table of format.
   Truncate -  Delete the entire data from the table.
   Delete   -  Delete the specific data from the table.

Q4. Numeric data type ( integer , floating, bigint , serial , big serial ,smallint)
    String data type ( char,  varchar, text)

Q5. Varchar - varchar is used for variable length.
    char    - it is used for fixed length.
    text    -it is used for long text.

Section B : DATA MANIPULATION 

Q2. update employee_table set salary = salary+salary*0.10;

Q3. delete from employee table where hire_date<'2022';

Q4. select*from employee_table where salary between 5000 and 8000;

Q5 select*from employee_table where first_name like 'j%';

Q6 Returning - it allows to return the values which we inserted ,delete etc.
   eg. insert into user (id , name) values ( 101,'pooja') returning*;

Section c : Sorting & Aggregation 
 
Q1. select*from employee_table order by salary desc ;

Q2. select*from employee_table order by salary desc limit 3:

Q3. select sum(salary) from employee_table;

Q4. select avg(salary) from employees_table group by salary having avg(salary)>7000;

Section D : String & Date function 

Q1.select concat(first_name,' ',last_name) from employee_table;

Q2. select extract ('year'from hire_date) from employees_table;

Q3. select upper(first_name)from employees_table;

Q5.select date_trunc('month',hire_date) from employees_date;

Section E : Advanced filtering & conditional logic 

Q1. select coalsce(salary,5000) from employees_table;

Q2. select greatest(salary) from employee_table;
    select least(salary) from employee_table;

Section F: Joins & set operations

Q1. select* from employees AS e1 inner join departments AS d1 on e1.dept_id = d1.dept_id 

Q4.   Union – Union removes duplicate values from the given data and it is slower due to extra step.
             Eg.  select dept_id from employees union select dept_id from departments.
      Union all – union all includes all the rows from given in data and it is faster than union.
             Eg. select dept_id from employees union all select dept_id from departments




 

